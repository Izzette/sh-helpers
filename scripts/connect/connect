#!/bin/bash

# sh-helpers/scripts/shelp-connect
# Isabell Cowan (c) 2015
# https://github.com/Izzette/sh-helpers

# Do not remove the lines immediately below
#@start
CFG_PATH=
#@end

source "$CFG_PATH"

VERBOSE=0
CHOICE=()
ID="shelp-connect"

function check_root() {
	# Check if this script is running as root
	if [[ 0 -ne $EUID ]]; then
		printf "${ID}: This script must be run as root\n" >&2
		exit 1
	fi
	return 0
}

check_root

function parse_long_opt() {
	local long_opt=$1
	if [[ "verbose=" = ${long_opt:0:8} ]]; then
		VERBOSE="${long_opt:8}"
	else
		printf "${ID}: Long option \"${long_opt}\" not recognized\n" >&2
		exit 1
	fi
	return 0 
}

function parse_opt() {
	local opt="$1"
	if [[ "-" = ${opt:0:1} ]]; then
		parse_long_opt "${opt:1}" || return 1
	else
		while IFS= read -n 1 char; do
			if [[ "" = $char || " " = $char ]]; then
				break
			elif [[ "v" = $char ]]; then
				let "VERBOSE++"
			else
				printf "${ID}: Short option ${char} not recognized\n" >&2
				exit 1
			fi
		done <<< "$opt"
	fi
	return 0 
}

function parse_choice() {
	local choice=$1
	CHOICE+=("$choice")
	return 0
}

function parse_args() {
	local args=$@
	for a in $args; do
		if [[ "-" = ${a:0:1} ]]; then
			parse_opt "${a:1}" 
		else
			parse_choice "$a"
		fi
	done
	return 0
}

function check_choice() {
	if [[ 0 -eq ${#CHOICE} ]]; then
		if [[ -z $DEFAULT ]]; then
			printf "${ID}: No default profile found, you can specify it at \"${DEFUALTS_PATH}\"\n" >&2
			exit 1
		fi
		CHOICE=(${DEFAULT[@]})
	fi
	return 0
}

function set_verbosity() {
	[[ 0 -lt $VERBOSE ]] && set -x
}

parse_args "$@"
set_verbosity
check_choice

NAME=${IFACE["${CHOICE[0]}"]}
TYPE=${IFACE["${NAME},type"]}

function kill_wpa() {
	# Check for process instance of wpa_supplicant
	local inst=$(($(ps -C wpa_supplicant | wc -l) - 1))
	if [[ 0 -ne $inst ]]; then
		# Attempt to terminate cleanly
		# If all else fails, kill to all instances
		wpa_cli terminate &> /dev/null || killall -SIGTERM wpa_supplicant
	fi
	return 0
}

function connect_wifi() {
	local mode="${CHOICE[1]}"
	local protocol="${CHOICE[2]}"

	local ud="${IFACE["${NAME},ud"]}"

	if [[ 0 -ne $ud ]]; then
		ip link "set" "$NAME" up
		iw dev "$NAME" "set" "type" "$mode"
	else
		ip link "set" "$NAME" down
		iw dev "$NAME" "set" "type" "$mode"
		ip link "set" "$NAME" up
	fi

	if [[ "open" == $protocol ]]; then
		local ssid="${CHOICE[3]}"
		local freq="${CHOICE[4]}"

		if [[ -z $ssid ]]; then
			printf "${ID}: Open network configuration requires an SSID\n" >&2
			exit 1
		fi

		# The lack of quotation marks around $freq prevents it from being passed as an empty string ie. ""
		iw "$NAME" connect "$ssid" $freq
	elif [[ "wpa" == $protocol ]]; then
		if [[ ! -z ${CHOICE[3]} && ! -z ${CHOICE[4]} ]]; then
			local ssid="${CHOICE[3]}"
			local phrase="${CHOICE[4]}"

			wpa_supplicant -B -D nl80211,wext -i "$NAME" -c <(wpa_passphrase "$ssid" "$phrase")
		else
			wpa_supplicant -B -D nl80211,wext -i "$NAME" -c "$WPA_PATH"
		fi
	else
		printf "${ID}: Unrecognized protocol \"$protocol\"\n" >&2
		exit 1
	fi

	: "Waiting 5s for connection on \"$NAME\" with \"$protocol\""
	sleep 5
	dhcpcd "$NAME"
	return 0
}

kill_wpa

if [[ "wifi" = $TYPE ]]; then
	connect_wifi
elif [[ "wired" == $TYPE ]]; then
	ip link "set" "$NAME" up
	dhcpcd "$NAME"
else
	printf "${ID}: Unrecognized profile \"${CHOICE[0]}\"\n" >&2
	exit 1
fi

exit 0

